
# Common settings for Airflow services.
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.6.0}  # Airflow image used for all Airflow services.
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor  # Configures Airflow to use CeleryExecutor.
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow  # Database connection string for PostgreSQL.
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow  # Result backend for Celery workers.
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0  # Redis URL for Celery broker.
    AIRFLOW__CORE__FERNET_KEY: ''  # Fernet key for encrypting data.
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'  # All DAGs are paused when created.
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'  # Load example DAGs for reference.
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'  # Authentication backends for Airflow.
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'  # Enable health checks for the scheduler.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- ucimlrepo pymongo }  # Additional Python packages to install.

    # SMTP configuration for sending email notifications.
    AIRFLOW__SMTP__SMTP_HOST: smtp.example.com
    AIRFLOW__SMTP__SMTP_STARTTLS: 'true'
    AIRFLOW__SMTP__SMTP_SSL: 'false'
    AIRFLOW__SMTP__SMTP_USER: youremail@example.com
    AIRFLOW__SMTP__SMTP_PASSWORD: yourpassword
    AIRFLOW__SMTP__SMTP_PORT: '587'
    AIRFLOW__SMTP__SMTP_MAIL_FROM: youremail@example.com
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags  # Mount local dags directory to Airflow container.
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs  # Mount local logs directory to Airflow container.
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins  # Mount local plugins directory to Airflow container.
  user: "${AIRFLOW_UID:-50000}:0" 
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy  # Ensure Redis is healthy before starting Airflow services.
    postgres:
      condition: service_healthy  # Ensure PostgreSQL is healthy before starting Airflow services.

# Define the services.
services:
  postgres:
    image: postgres:13  # PostgreSQL database image.
    environment:
      POSTGRES_USER: airflow  # Username for PostgreSQL.
      POSTGRES_PASSWORD: airflow  # Password for PostgreSQL.
      POSTGRES_DB: airflow  # Database name for Airflow.
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # Mount volume for PostgreSQL data.
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]  # Health check command for PostgreSQL.
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest  # Redis image for Celery broker.
    expose:
      - 6379  # Expose Redis port.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Health check command for Redis.
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  mymongo:
    image: mongo  # MongoDB image for additional data storage.
    ports:
      - "27017:27017"  # Map MongoDB port to host.
    volumes:
      - mongo-data:/data/db  # Mount volume for MongoDB data.

  airflow-webserver:
    <<: *airflow-common
    command: webserver  # Command to start Airflow webserver.
    ports:
      - "8080:8080"  # Expose Airflow webserver port.
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]  # Health check for Airflow webserver.
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully  # Ensure Airflow initialization is complete.

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler  # Command to start Airflow scheduler.
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]  # Health check for Airflow scheduler.
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker  # Command to start Celery worker.
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'  # Health check for Celery worker.
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"  # Required for proper shutdown of Celery workers.
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer  # Command to start Airflow triggerer.
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']  # Health check for Airflow triggerer.
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
  mongo-data: